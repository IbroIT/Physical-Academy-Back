from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator,FileExtensionValidator
import json
from django.utils.translation import gettext_lazy as _
from django.utils import timezone



class Leadership(models.Model):
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"""
    LEADERSHIP_TYPES = [
        ('director', '–î–∏—Ä–µ–∫—Ç–æ—Ä'),
        ('deputy_director', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞'),
        ('department_head', '–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π'),
        ('dean', '–î–µ–∫–∞–Ω'),
        ('vice_dean', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–µ–∫–∞–Ω–∞'),
    ]
    
    
    # –ò–º—è
    name = models.CharField(max_length=200, verbose_name="–§–ò–û")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)", blank=True)
    
    # –î–æ–ª–∂–Ω–æ—Å—Ç—å
    position = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å")
    position_kg = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (KG)", blank=True)
    position_en = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (EN)", blank=True)
    
    # –£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å
    degree = models.CharField(max_length=200, verbose_name="–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å")
    degree_kg = models.CharField(max_length=200, verbose_name="–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å (KG)", blank=True)
    degree_en = models.CharField(max_length=200, verbose_name="–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å (EN)", blank=True)
    
    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    experience = models.CharField(max_length=100, verbose_name="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    experience_kg = models.CharField(max_length=100, verbose_name="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (KG)", blank=True)
    experience_en = models.CharField(max_length=100, verbose_name="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (EN)", blank=True)
    
    # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
    bio = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", blank=True)
    bio_kg = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (KG)", blank=True)
    bio_en = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (EN)", blank=True)
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (JSON –ø–æ–ª–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    achievements = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", blank=True)
    achievements_kg = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (KG)", blank=True)
    achievements_en = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (EN)", blank=True)
    
    # –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç/–∫–∞—Ñ–µ–¥—Ä–∞
    department = models.CharField(max_length=50,  verbose_name="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç(RU)", blank=True)
    department_kg = models.CharField(max_length=200, verbose_name="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (KG)", blank=True)
    department_en = models.CharField(max_length=200, verbose_name="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (EN)", blank=True)
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è –∑–∞–≤–µ–¥—É—é—â–∏—Ö –∫–∞—Ñ–µ–¥—Ä–∞–º–∏)
    specialization = models.TextField(verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", blank=True)
    specialization_kg = models.TextField(verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (KG)", blank=True)
    specialization_en = models.TextField(verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (EN)", blank=True)
    

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # –§–æ—Ç–æ
    image = models.ImageField(upload_to='leadership/photos/', verbose_name="–§–æ—Ç–æ", blank=True)
    
    # –¢–∏–ø —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    leadership_type = models.CharField(max_length=20, choices=LEADERSHIP_TYPES, verbose_name="–¢–∏–ø —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")
    is_director = models.BooleanField(default=False, verbose_name="–Ø–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
        verbose_name_plural = "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.position}"



class Accreditation(models.Model):
    """–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"""
    ACCREDITATION_TYPES = [
        ('national', '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è'),
        ('international', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è'),
        ('institutional', '–ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è'),
        ('programmatic', '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è'),
    ]
    
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    organization = models.CharField(max_length=200, verbose_name="–ê–∫–∫—Ä–µ–¥–∏—Ç—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
    organization_kg = models.CharField(max_length=200, verbose_name="–ê–∫–∫—Ä–µ–¥–∏—Ç—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (KG)", blank=True)
    organization_en = models.CharField(max_length=200, verbose_name="–ê–∫–∫—Ä–µ–¥–∏—Ç—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (EN)", blank=True)
    
    accreditation_type = models.CharField(max_length=20, choices=ACCREDITATION_TYPES, verbose_name="–¢–∏–ø –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏")
    accreditation_type_kg = models.CharField(max_length=100, verbose_name="–¢–∏–ø –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ (KG)", blank=True)
    accreditation_type_en = models.CharField(max_length=100, verbose_name="–¢–∏–ø –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ (EN)", blank=True)
    
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    certificate_image = models.ImageField(upload_to='accreditations/certificates/', verbose_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", blank=True)
    organization_logo = models.ImageField(upload_to='accreditations/logos/', verbose_name="–õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", blank=True)
    
    issue_date = models.DateField(verbose_name="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏")
    expiry_date = models.DateField(verbose_name="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", blank=True, null=True)
    
    certificate_number = models.CharField(max_length=100, verbose_name="–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞", blank=True)
    
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è"
        verbose_name_plural = "–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏"
        ordering = ['order', '-issue_date']
    
    def __str__(self):
        return f"{self.name} - {self.organization}"
    
    @property
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è"""
        if self.expiry_date:
            return timezone.now().date() <= self.expiry_date
        return True





class OrganizationStructure(models.Model):
    """Model for university organizational structure"""
    
    STRUCTURE_TYPES = [
        ('leadership', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'),
        ('faculties', '–§–∞–∫—É–ª—å—Ç–µ—Ç—ã'),
        ('administrative', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'),
        ('support', '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'),
    ]
    
    name_ru = models.CharField(
        max_length=200,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Name (English)',
        help_text='Department name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Department name in Kyrgyz',
        blank=True
    )
    
    head_name_ru = models.CharField(
        max_length=200,
        verbose_name='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–†—É—Å—Å–∫–∏–π)',
        help_text='–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        blank=True
    )
    
    head_name_en = models.CharField(
        max_length=200,
        verbose_name='Head (English)',
        help_text='Head name in English',
        blank=True
    )
    
    head_name_ky = models.CharField(
        max_length=200,
        verbose_name='–ë–∞—à—á—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Head name in Kyrgyz',
        blank=True
    )
    
    structure_type = models.CharField(
        max_length=20,
        choices=STRUCTURE_TYPES,
        verbose_name='–¢–∏–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
        help_text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
    )
    
    phone = models.CharField(
        max_length=50,
        verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω',
        blank=True
    )
    
    email = models.EmailField(
        verbose_name='Email',
        blank=True
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–ò–∫–æ–Ω–∫–∞',
        help_text='Emoji –∏–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        default='üè¢'
    )
    
    parent = models.ForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
    )
    
    order = models.PositiveIntegerField(
        default=1,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–æ',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
        verbose_name_plural = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
        ordering = ['structure_type', 'order', 'name_ru']
        
    def __str__(self):
        return self.name_ru
    
    def get_display_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name_ru
    
    def get_display_head_name(self, language='ru'):
        """Get head name in specified language"""
        if language == 'en' and self.head_name_en:
            return self.head_name_en
        elif language == 'ky' and self.head_name_ky:
            return self.head_name_ky
        return self.head_name_ru



class DownloadableDocument(models.Model):
    """–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
    title_ru = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–π)', max_length=255)
    title_kg = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)', max_length=255)
    title_en = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)', max_length=255)
    
    description_ru = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)', blank=True)
    description_kg = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)', blank=True)
    description_en = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)', blank=True)
    
    # –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file = models.FileField(
        upload_to='documents/',
        validators=[FileExtensionValidator(['pdf', 'doc', 'docx'])],
        verbose_name=_('–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    )
    
    # –ù–µ–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
    file_size = models.PositiveIntegerField(_('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç—ã)'), null=True, blank=True)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–µ–Ω'), default=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)

    class Meta:
        verbose_name = _('–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
        verbose_name_plural = _('–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
        ordering = ['title_ru']

    def __str__(self):
        return self.title_ru
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_kg:
            return self.title_kg
        return self.title_ru
    
    @property
    def upload_date(self):
        """Alias for created_at to match serializer"""
        return self.created_at
