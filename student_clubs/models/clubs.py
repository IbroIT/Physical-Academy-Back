from django.db import models
from django.core.validators import URLValidator


class ClubCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª—É–±–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3 —è–∑—ã–∫–æ–≤"""

    name_ru = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_en = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)")
    name_kg = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)")
    slug = models.SlugField(unique=True, verbose_name="–°–ª–∞–≥")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")

    class Meta:
        verbose_name = "Club Category"
        verbose_name_plural = "Club Categories"
        ordering = ["order", "name_ru"]

    def __str__(self):
        return self.name_ru

    def get_name(self, language="ru"):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        return getattr(self, f"name_{language}", self.name_ru)


class Club(models.Model):
    """–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –∫–ª—É–± —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3 —è–∑—ã–∫–æ–≤"""

    STATUS_CHOICES = [
        ("active", "–ê–∫—Ç–∏–≤–µ–Ω"),
        ("recruiting", "–ù–∞–±–æ—Ä"),
        ("inactive", "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"),
    ]

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    category = models.ForeignKey(
        ClubCategory,
        on_delete=models.CASCADE,
        related_name="clubs",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    icon = models.CharField(max_length=10, default="üéØ", verbose_name="–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏)")
    status = models.CharField(
        max_length=20, choices=STATUS_CHOICES, default="active", verbose_name="–°—Ç–∞—Ç—É—Å"
    )
    members_count = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    join_link = models.URLField(
        max_length=500,
        validators=[URLValidator()],
        verbose_name="–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        help_text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ Telegram –≥—Ä—É–ø–ø—É",
    )

    # –ù–∞–∑–≤–∞–Ω–∏–µ (3 —è–∑—ã–∫–∞)
    name_ru = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)")

    # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (3 —è–∑—ã–∫–∞)
    short_description_ru = models.CharField(
        max_length=300, verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (RU)"
    )
    short_description_en = models.CharField(
        max_length=300, verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (EN)"
    )
    short_description_kg = models.CharField(
        max_length=300, verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (KG)"
    )

    # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (3 —è–∑—ã–∫–∞)
    description_ru = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)")

    # –¶–µ–ª–∏ (3 —è–∑—ã–∫–∞)
    goals_ru = models.TextField(
        verbose_name="–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ (RU)", help_text="–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∫–ª—É–±–∞"
    )
    goals_en = models.TextField(
        verbose_name="–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ (EN)", help_text="–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∫–ª—É–±–∞"
    )
    goals_kg = models.TextField(
        verbose_name="–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ (KG)", help_text="–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∫–ª—É–±–∞"
    )

    # –ú–æ—Ç–∏–≤–∞—Ü–∏—è (3 —è–∑—ã–∫–∞)
    motivation_ru = models.TextField(
        verbose_name="–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (RU)",
        help_text="–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±",
    )
    motivation_en = models.TextField(
        verbose_name="–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (EN)",
        help_text="–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±",
    )
    motivation_kg = models.TextField(
        verbose_name="–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (KG)",
        help_text="–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±",
    )

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á (3 —è–∑—ã–∫–∞)
    meetings_ru = models.CharField(
        max_length=200,
        verbose_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á (RU)",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É 19:00",
    )
    meetings_en = models.CharField(
        max_length=200,
        verbose_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á (EN)",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: Every Wednesday 7 PM",
    )
    meetings_kg = models.CharField(
        max_length=200,
        verbose_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á (KG)",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä —à–∞—Ä—à–µ–º–±–∏ —Å–∞–∞—Ç 19:00",
    )

    # –¢–µ–≥–∏
    tags = models.JSONField(
        default=list,
        blank=True,
        verbose_name="–¢–µ–≥–∏",
        help_text="–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞",
    )

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Meta:
        verbose_name = "Club"
        verbose_name_plural = "Clubs"
        ordering = ["order", "-members_count", "name_ru"]

    def __str__(self):
        return self.name_ru

    def get_field(self, field_name, language="ru"):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        field_with_lang = f"{field_name}_{language}"
        return getattr(self, field_with_lang, getattr(self, f"{field_name}_ru"))


class ClubLeader(models.Model):
    """–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –∫–ª—É–±–æ–≤"""

    club = models.ForeignKey(
        Club, on_delete=models.CASCADE, related_name="leaders", verbose_name="–ö–ª—É–±"
    )

    # –§–ò–û (3 —è–∑—ã–∫–∞)
    name_ru = models.CharField(max_length=200, verbose_name="–§–ò–û (RU)")
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)")

    # –†–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å (3 —è–∑—ã–∫–∞)
    role_ru = models.CharField(max_length=200, verbose_name="–†–æ–ª—å (RU)")
    role_en = models.CharField(max_length=200, verbose_name="–†–æ–ª—å (EN)")
    role_kg = models.CharField(max_length=200, verbose_name="–†–æ–ª—å (KG)")

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    phone = models.CharField(
        max_length=50, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω"
    )
    photo = models.ImageField(
        upload_to="club_leaders/", blank=True, null=True, verbose_name="–§–æ—Ç–æ"
    )

    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫")

    class Meta:
        verbose_name = "Club Leader"
        verbose_name_plural = "Club Leaders"
        ordering = ["order", "name_ru"]

    def __str__(self):
        return f"{self.name_ru} ({self.club.name_ru})"

    def get_field(self, field_name, language="ru"):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        field_with_lang = f"{field_name}_{language}"
        return getattr(self, field_with_lang, getattr(self, f"{field_name}_ru"))


class ClubStats(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–ª—É–±–æ–≤"""

    # –ó–Ω–∞—á–µ–Ω–∏–µ
    value = models.CharField(max_length=50, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ")

    # –ú–µ—Ç–∫–∞ (3 —è–∑—ã–∫–∞)
    label_ru = models.CharField(max_length=200, verbose_name="–ú–µ—Ç–∫–∞ (RU)")
    label_en = models.CharField(max_length=200, verbose_name="–ú–µ—Ç–∫–∞ (EN)")
    label_kg = models.CharField(max_length=200, verbose_name="–ú–µ—Ç–∫–∞ (KG)")

    icon = models.CharField(max_length=10, default="üìä", verbose_name="–ò–∫–æ–Ω–∫–∞")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    class Meta:
        verbose_name = "Club Statistics"
        verbose_name_plural = "Club Statistics"
        ordering = ["order"]

    def __str__(self):
        return f"{self.value} - {self.label_ru}"

    def get_label(self, language="ru"):
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        return getattr(self, f"label_{language}", self.label_ru)
