from django.db import models


class ExchangeRegion(models.Model):
    """Regions for exchange programs (e.g., Europe, Asia, America)"""

    name_ru = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_en = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)")
    name_kg = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)")
    code = models.CharField(max_length=50, unique=True, verbose_name="–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞")

    def __str__(self):
        return self.name_en

    class Meta:
        verbose_name = "Exchange Region"
        verbose_name_plural = "Exchange Regions"


class ExchangeDurationType(models.Model):
    """Duration types for exchange programs (e.g., semester, year, summer)"""

    name_ru = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_en = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)")
    name_kg = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)")
    code = models.CharField(
        max_length=50, unique=True, verbose_name="–ö–æ–¥ —Ç–∏–ø–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )

    def __str__(self):
        return self.name_en

    class Meta:
        verbose_name = "Exchange Duration Type"
        verbose_name_plural = "Exchange Duration Types"


class ExchangeProgram(models.Model):
    """Exchange program with universities around the world"""

    # Basic info
    university_ru = models.CharField(max_length=255, verbose_name="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (RU)")
    university_en = models.CharField(max_length=255, verbose_name="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (EN)")
    university_kg = models.CharField(max_length=255, verbose_name="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (KG)")
    country_ru = models.CharField(max_length=100, verbose_name="–°—Ç—Ä–∞–Ω–∞ (RU)")
    country_en = models.CharField(max_length=100, verbose_name="–°—Ç—Ä–∞–Ω–∞ (EN)")
    country_kg = models.CharField(max_length=100, verbose_name="–°—Ç—Ä–∞–Ω–∞ (KG)")

    # Region and Duration
    region = models.ForeignKey(
        ExchangeRegion,
        on_delete=models.CASCADE,
        related_name="programs",
        verbose_name="–†–µ–≥–∏–æ–Ω",
    )
    duration_type = models.ForeignKey(
        ExchangeDurationType,
        on_delete=models.CASCADE,
        related_name="programs",
        verbose_name="–¢–∏–ø –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    )
    duration_ru = models.CharField(max_length=100, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (RU)")
    duration_en = models.CharField(max_length=100, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (EN)")
    duration_kg = models.CharField(max_length=100, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (KG)")

    # Description
    description_ru = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)")

    # Additional info
    cost = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å"
    )
    language_ru = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è (RU)"
    )
    language_en = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è (EN)"
    )
    language_kg = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è (KG)"
    )
    grants_available_ru = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã (RU)"
    )
    grants_available_en = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã (EN)"
    )
    grants_available_kg = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã (KG)"
    )
    deadline = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏"
    )
    available_spots = models.PositiveIntegerField(
        default=0, verbose_name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞"
    )
    icon = models.CharField(max_length=20, default="üéì", verbose_name="–ò–∫–æ–Ω–∫–∞ (emoji)")
    website = models.URLField(blank=True, null=True, verbose_name="–í–µ–±-—Å–∞–π—Ç")

    # Difficulty level
    DIFFICULTY_CHOICES = [
        ("low", "–ù–∏–∑–∫–∞—è"),
        ("medium", "–°—Ä–µ–¥–Ω—è—è"),
        ("high", "–í—ã—Å–æ–∫–∞—è"),
    ]
    difficulty = models.CharField(
        max_length=20,
        choices=DIFFICULTY_CHOICES,
        default="medium",
        verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
    )
    difficulty_label_ru = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–ú–µ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (RU)"
    )
    difficulty_label_en = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–ú–µ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (EN)"
    )
    difficulty_label_kg = models.CharField(
        max_length=100, blank=True, null=True, verbose_name="–ú–µ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (KG)"
    )

    # Featured
    is_featured = models.BooleanField(default=False, verbose_name="–ò–∑–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")

    # Status
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")

    # Ordering
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    def __str__(self):
        return f"{self.university_en} ({self.country_en})"

    class Meta:
        verbose_name = "Exchange Program"
        verbose_name_plural = "Exchange Programs"
        ordering = ["order", "university_en"]


class ExchangeProgramRequirement(models.Model):
    """Requirements for exchange programs"""

    program = models.ForeignKey(
        ExchangeProgram,
        on_delete=models.CASCADE,
        related_name="requirements",
        verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–º–µ–Ω–∞",
    )
    text_ru = models.CharField(max_length=255, verbose_name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ (RU)")
    text_en = models.CharField(max_length=255, verbose_name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ (EN)")
    text_kg = models.CharField(max_length=255, verbose_name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ (KG)")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return self.text_en[:50]

    class Meta:
        verbose_name = "Exchange Program Requirement"
        verbose_name_plural = "Exchange Program Requirements"
        ordering = ["order"]


class ExchangeProgramBenefit(models.Model):
    """Benefits of exchange programs"""

    program = models.ForeignKey(
        ExchangeProgram,
        on_delete=models.CASCADE,
        related_name="benefits",
        verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–º–µ–Ω–∞",
    )
    text_ru = models.CharField(max_length=255, verbose_name="–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (RU)")
    text_en = models.CharField(max_length=255, verbose_name="–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (EN)")
    text_kg = models.CharField(max_length=255, verbose_name="–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (KG)")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return self.text_en[:50]

    class Meta:
        verbose_name = "Exchange Program Benefit"
        verbose_name_plural = "Exchange Program Benefits"
        ordering = ["order"]


class ExchangeProgramCourse(models.Model):
    """Available courses in exchange programs"""

    program = models.ForeignKey(
        ExchangeProgram,
        on_delete=models.CASCADE,
        related_name="available_courses",
        verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–º–µ–Ω–∞",
    )
    name_ru = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (RU)")
    name_en = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (EN)")
    name_kg = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (KG)")

    def __str__(self):
        return self.name_en

    class Meta:
        verbose_name = "Exchange Program Course"
        verbose_name_plural = "Exchange Program Courses"


class ExchangePageStat(models.Model):
    """Statistics for exchange programs page"""

    icon = models.CharField(max_length=20, verbose_name="–ò–∫–æ–Ω–∫–∞ (emoji)", default="üåç")
    value_ru = models.CharField(max_length=50, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (RU)")
    value_en = models.CharField(max_length=50, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (EN)")
    value_kg = models.CharField(max_length=50, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (KG)")
    label_ru = models.CharField(max_length=100, verbose_name="–ü–æ–¥–ø–∏—Å—å (RU)")
    label_en = models.CharField(max_length=100, verbose_name="–ü–æ–¥–ø–∏—Å—å (EN)")
    label_kg = models.CharField(max_length=100, verbose_name="–ü–æ–¥–ø–∏—Å—å (KG)")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return f"{self.value_en} - {self.label_en}"

    class Meta:
        verbose_name = "Exchange Page Stat"
        verbose_name_plural = "Exchange Page Stats"
        ordering = ["order"]


class ExchangeDeadline(models.Model):
    """Deadlines for exchange programs"""

    date = models.CharField(max_length=100, verbose_name="–î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞")
    program_ru = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ (RU)")
    program_en = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ (EN)")
    program_kg = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞ (KG)")
    days_left_ru = models.CharField(max_length=100, verbose_name="–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π (RU)")
    days_left_en = models.CharField(max_length=100, verbose_name="–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π (EN)")
    days_left_kg = models.CharField(max_length=100, verbose_name="–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π (KG)")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def __str__(self):
        return f"{self.date} - {self.program_en}"

    class Meta:
        verbose_name = "Exchange Deadline"
        verbose_name_plural = "Exchange Deadlines"
        ordering = ["order"]
