from django.db import models
from django.core.validators import MinValueValidator, EmailValidator
from django.utils.translation import gettext_lazy as _


class BoardOfTrustees(models.Model):
    """–ü–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–æ–≤–µ—Ç / Board of Trustees"""
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–§–ò–û (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)", blank=True)
    
    # Position fields
    position = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (RU)")
    position_kg = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (KG)", blank=True)
    position_en = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (EN)", blank=True)
    
    # Bio fields
    bio = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (RU)")
    bio_kg = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (KG)", blank=True)
    bio_en = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (EN)", blank=True)
    
    # Achievements (JSON field for list of achievements in each language)
    achievements = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (RU)", blank=True)
    achievements_kg = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (KG)", blank=True)
    achievements_en = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Image
    image = models.ImageField(upload_to='trustees/', verbose_name="–§–æ—Ç–æ", blank=True, null=True)
    
    # Icon (emoji or icon class)
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üëë', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ß–ª–µ–Ω –ø–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞"
        verbose_name_plural = "–ü–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–æ–≤–µ—Ç"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.position}"


class AuditCommission(models.Model):
    """–†–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è / Audit Commission"""
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–§–ò–û (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)", blank=True)
    
    # Position fields
    position = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (RU)")
    position_kg = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (KG)", blank=True)
    position_en = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (EN)", blank=True)
    
    # Department fields
    department = models.CharField(max_length=200, verbose_name="–û—Ç–¥–µ–ª (RU)", blank=True)
    department_kg = models.CharField(max_length=200, verbose_name="–û—Ç–¥–µ–ª (KG)", blank=True)
    department_en = models.CharField(max_length=200, verbose_name="–û—Ç–¥–µ–ª (EN)", blank=True)
    
    # Achievements (JSON field for list of achievements)
    achievements = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (RU)", blank=True)
    achievements_kg = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (KG)", blank=True)
    achievements_en = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Image
    image = models.ImageField(upload_to='audit_commission/', verbose_name="–§–æ—Ç–æ", blank=True, null=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ß–ª–µ–Ω —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏"
        verbose_name_plural = "–†–µ–≤–∏–∑–∏–æ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.position}"


class AcademicCouncil(models.Model):
    """–£—á–µ–Ω—ã–π —Å–æ–≤–µ—Ç / Academic Council"""
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–§–ò–û (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)", blank=True)
    
    # Position fields
    position = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (RU)")
    position_kg = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (KG)", blank=True)
    position_en = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (EN)", blank=True)
    
    # Department fields
    department = models.CharField(max_length=200, verbose_name="–ö–∞—Ñ–µ–¥—Ä–∞/–û—Ç–¥–µ–ª (RU)", blank=True)
    department_kg = models.CharField(max_length=200, verbose_name="–ö–∞—Ñ–µ–¥—Ä–∞/–û—Ç–¥–µ–ª (KG)", blank=True)
    department_en = models.CharField(max_length=200, verbose_name="–ö–∞—Ñ–µ–¥—Ä–∞/–û—Ç–¥–µ–ª (EN)", blank=True)
    
    # Achievements (JSON field for list of achievements)
    achievements = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (RU)", blank=True)
    achievements_kg = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (KG)", blank=True)
    achievements_en = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Image
    image = models.ImageField(upload_to='academic_council/', verbose_name="–§–æ—Ç–æ", blank=True, null=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ß–ª–µ–Ω —É—á–µ–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"
        verbose_name_plural = "–£—á–µ–Ω—ã–π —Å–æ–≤–µ—Ç"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.position}"


class TradeUnionBenefit(models.Model):
    """–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ / Trade Union Benefits"""
    
    # Title fields
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    title_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    title_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Description fields
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üéÅ', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        verbose_name_plural = "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        ordering = ['order', 'title']
    
    def __str__(self):
        return self.title


class TradeUnionEvent(models.Model):
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ / Trade Union Events"""
    
    # Title fields
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    title_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    title_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Date fields
    date = models.CharField(max_length=100, verbose_name="–î–∞—Ç–∞ (RU)")
    date_kg = models.CharField(max_length=100, verbose_name="–î–∞—Ç–∞ (KG)", blank=True)
    date_en = models.CharField(max_length=100, verbose_name="–î–∞—Ç–∞ (EN)", blank=True)
    
    # Description fields
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # Image
    image = models.ImageField(upload_to='trade_union_events/', verbose_name="–§–æ—Ç–æ", blank=True, null=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìÖ', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        verbose_name_plural = "–°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        ordering = ['order', 'title']
    
    def __str__(self):
        return self.title


class TradeUnionStats(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ / Trade Union Statistics"""
    
    # Label fields
    label = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    label_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    label_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Value
    value = models.IntegerField(verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ", validators=[MinValueValidator(0)])
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìä', blank=True)
    
    # Color gradient
    color_from = models.CharField(max_length=50, verbose_name="–¶–≤–µ—Ç –æ—Ç", default='blue-500')
    color_to = models.CharField(max_length=50, verbose_name="–¶–≤–µ—Ç –¥–æ", default='green-500')
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        verbose_name_plural = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞"
        ordering = ['order', 'label']
    
    def __str__(self):
        return f"{self.label}: {self.value}"


class Commission(models.Model):
    """–ö–æ–º–∏—Å—Å–∏–∏ / Commissions"""
    
    CATEGORY_CHOICES = [
        ('academic', '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ'),
        ('quality', '–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'),
        ('student', '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ'),
        ('methodical', '–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ'),
        ('all', '–í—Å–µ'),
    ]
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Chairman fields
    chairman = models.CharField(max_length=200, verbose_name="–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (RU)")
    chairman_kg = models.CharField(max_length=200, verbose_name="–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (KG)", blank=True)
    chairman_en = models.CharField(max_length=200, verbose_name="–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (EN)", blank=True)
    
    # Description fields
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # Members (JSON field for list of members)
    members = models.JSONField(default=list, verbose_name="–ß–ª–µ–Ω—ã (RU)", blank=True)
    members_kg = models.JSONField(default=list, verbose_name="–ß–ª–µ–Ω—ã (KG)", blank=True)
    members_en = models.JSONField(default=list, verbose_name="–ß–ª–µ–Ω—ã (EN)", blank=True)
    
    # Responsibilities (JSON field)
    responsibilities = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (RU)", blank=True)
    responsibilities_kg = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (KG)", blank=True)
    responsibilities_en = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (EN)", blank=True)
    
    # Category
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", default='all')
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìã', blank=True)
    
    # Contact
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ö–æ–º–∏—Å—Å–∏—è"
        verbose_name_plural = "–ö–æ–º–∏—Å—Å–∏–∏"
        ordering = ['order', 'name']
    
    def __str__(self):
        return self.name


class AdministrativeDepartment(models.Model):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã / Administrative Departments"""
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Head fields
    head = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (RU)")
    head_kg = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (KG)", blank=True)
    head_en = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (EN)", blank=True)
    
    # Responsibilities (JSON field for list)
    responsibilities = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (RU)", blank=True)
    responsibilities_kg = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (KG)", blank=True)
    responsibilities_en = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üèõÔ∏è', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª"
        verbose_name_plural = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã"
        ordering = ['order', 'name']
    
    def __str__(self):
        return self.name


class AdministrativeUnit(models.Model):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è / Administrative Units"""
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Description fields
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)")
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # Head fields
    head = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (RU)")
    head_kg = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (KG)", blank=True)
    head_en = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (EN)", blank=True)
    
    # Location fields
    location = models.CharField(max_length=200, verbose_name="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (RU)", blank=True)
    location_kg = models.CharField(max_length=200, verbose_name="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (KG)", blank=True)
    location_en = models.CharField(max_length=200, verbose_name="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (EN)", blank=True)
    
    # Staff fields
    staff = models.CharField(max_length=100, verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–ª (RU)", blank=True)
    staff_kg = models.CharField(max_length=100, verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–ª (KG)", blank=True)
    staff_en = models.CharField(max_length=100, verbose_name="–ü–µ—Ä—Å–æ–Ω–∞–ª (EN)", blank=True)
    
    # Responsibilities (JSON field for list)
    responsibilities = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (RU)", blank=True)
    responsibilities_kg = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (KG)", blank=True)
    responsibilities_en = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üè¢', blank=True)
    
    # Color (for UI)
    color = models.CharField(max_length=50, verbose_name="–¶–≤–µ—Ç", default='blue', blank=True)
    color_class = models.CharField(max_length=100, verbose_name="CSS –∫–ª–∞—Å—Å —Ü–≤–µ—Ç–∞", default='from-blue-500 to-blue-600', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
        verbose_name_plural = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
        ordering = ['order', 'name']
    
    def __str__(self):
        return self.name


class BoardOfTrusteesStats(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ / Board of Trustees Statistics"""
    
    # Label fields
    label = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    label_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    label_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Target value (for counter animation)
    target_value = models.IntegerField(verbose_name="–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", validators=[MinValueValidator(0)])
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìä', blank=True)
    
    # Color gradient
    color_from = models.CharField(max_length=50, verbose_name="–¶–≤–µ—Ç –æ—Ç", default='blue-500')
    color_to = models.CharField(max_length=50, verbose_name="–¶–≤–µ—Ç –¥–æ", default='blue-600')
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞"
        verbose_name_plural = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–µ—á–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞"
        ordering = ['order', 'label']
    
    def __str__(self):
        return f"{self.label}: {self.target_value}"


class AuditCommissionStatistics(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ / Audit Commission Statistics"""
    
    # Label fields
    label = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    label_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    label_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Value
    value = models.CharField(max_length=100, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (RU)")
    value_kg = models.CharField(max_length=100, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (KG)", blank=True)
    value_en = models.CharField(max_length=100, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ (EN)", blank=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìä', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏"
        verbose_name_plural = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏"
        ordering = ['order', 'label']
    
    def __str__(self):
        return f"{self.label}: {self.value}"


# ========== NEW MODELS FOR MISSING APIs ==========

class Leadership(models.Model):
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∞–∫–∞–¥–µ–º–∏–∏ / Academy Leadership (–¥–ª—è /leadership/)"""
    
    LEADERSHIP_TYPE_CHOICES = [
        ('rector', '–†–µ–∫—Ç–æ—Ä'),
        ('vice_rector', '–ü—Ä–æ—Ä–µ–∫—Ç–æ—Ä'),
        ('director', '–î–∏—Ä–µ–∫—Ç–æ—Ä'),
        ('deputy_director', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞'),
        ('department_head', '–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π'),
        ('dean', '–î–µ–∫–∞–Ω'),
        ('vice_dean', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–µ–∫–∞–Ω–∞'),
    ]
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–§–ò–û (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–§–ò–û (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–§–ò–û (EN)", blank=True)
    
    # Position fields
    position = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (RU)")
    position_kg = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (KG)", blank=True)
    position_en = models.CharField(max_length=200, verbose_name="–î–æ–ª–∂–Ω–æ—Å—Ç—å (EN)", blank=True)
    
    # Leadership type
    leadership_type = models.CharField(
        max_length=50, 
        choices=LEADERSHIP_TYPE_CHOICES,
        verbose_name="–¢–∏–ø —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
        default='department_head'
    )
    
    # Department/Faculty
    department = models.CharField(max_length=200, verbose_name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (RU)", blank=True)
    department_kg = models.CharField(max_length=200, verbose_name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (KG)", blank=True)
    department_en = models.CharField(max_length=200, verbose_name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (EN)", blank=True)
    
    # Bio fields
    bio = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (RU)", blank=True)
    bio_kg = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (KG)", blank=True)
    bio_en = models.TextField(verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (EN)", blank=True)
    
    # Achievements
    achievements = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (RU)", blank=True)
    achievements_kg = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (KG)", blank=True)
    achievements_en = models.JSONField(default=list, verbose_name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (EN)", blank=True)
    
    # Education/Qualifications
    education = models.TextField(verbose_name="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (RU)", blank=True)
    education_kg = models.TextField(verbose_name="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (KG)", blank=True)
    education_en = models.TextField(verbose_name="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Contact information
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    
    # Image
    image = models.ImageField(upload_to='leadership/', verbose_name="–§–æ—Ç–æ", blank=True, null=True)
    
    # Years of experience
    experience_years = models.PositiveIntegerField(
        default=0, 
        verbose_name="–õ–µ—Ç –æ–ø—ã—Ç–∞",
        validators=[MinValueValidator(0)]
    )
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üë§', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
        verbose_name_plural = "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.position}"


class OrganizationStructure(models.Model):
    """–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ / Organization Structure (–¥–ª—è /organization-structure/)"""
    
    STRUCTURE_TYPE_CHOICES = [
        ('faculty', '–§–∞–∫—É–ª—å—Ç–µ—Ç'),
        ('department', '–ö–∞—Ñ–µ–¥—Ä–∞'),
        ('unit', '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'),
        ('service', '–°–ª—É–∂–±–∞'),
        ('center', '–¶–µ–Ω—Ç—Ä'),
    ]
    
    # Name fields
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    name_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    name_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Structure type
    structure_type = models.CharField(
        max_length=50,
        choices=STRUCTURE_TYPE_CHOICES,
        verbose_name="–¢–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        default='department'
    )
    
    # Description
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)", blank=True)
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # Head
    head = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (RU)", blank=True)
    head_kg = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (KG)", blank=True)
    head_en = models.CharField(max_length=200, verbose_name="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (EN)", blank=True)
    
    # Parent (for hierarchical structure)
    parent = models.ForeignKey(
        'self', 
        on_delete=models.CASCADE, 
        null=True, 
        blank=True,
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
    )
    
    # Responsibilities
    responsibilities = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (RU)", blank=True)
    responsibilities_kg = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (KG)", blank=True)
    responsibilities_en = models.JSONField(default=list, verbose_name="–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (EN)", blank=True)
    
    # Contact info
    email = models.EmailField(verbose_name="Email", blank=True)
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω", blank=True)
    location = models.CharField(max_length=200, verbose_name="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (RU)", blank=True)
    location_kg = models.CharField(max_length=200, verbose_name="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (KG)", blank=True)
    location_en = models.CharField(max_length=200, verbose_name="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (EN)", blank=True)
    
    # Staff count
    staff_count = models.PositiveIntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üèõÔ∏è', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
        verbose_name_plural = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.get_structure_type_display()})"


class Document(models.Model):
    """–î–æ–∫—É–º–µ–Ω—Ç—ã / Documents (–¥–ª—è /documents/)"""
    
    DOCUMENT_TYPE_CHOICES = [
        ('regulation', '–ü–æ–ª–æ–∂–µ–Ω–∏–µ'),
        ('order', '–ü—Ä–∏–∫–∞–∑'),
        ('instruction', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
        ('charter', '–£—Å—Ç–∞–≤'),
        ('plan', '–ü–ª–∞–Ω'),
        ('report', '–û—Ç—á–µ—Ç'),
        ('other', '–î—Ä—É–≥–æ–µ'),
    ]
    
    # Title fields
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)")
    title_kg = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (KG)", blank=True)
    title_en = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", blank=True)
    
    # Document type
    document_type = models.CharField(
        max_length=50,
        choices=DOCUMENT_TYPE_CHOICES,
        verbose_name="–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        default='other'
    )
    
    # Description
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (RU)", blank=True)
    description_kg = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (KG)", blank=True)
    description_en = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ (EN)", blank=True)
    
    # File
    file = models.FileField(upload_to='documents/', verbose_name="–§–∞–π–ª", blank=True, null=True)
    
    # Document number/code
    document_number = models.CharField(max_length=100, verbose_name="–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞", blank=True)
    
    # Date
    document_date = models.DateField(verbose_name="–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", blank=True, null=True)
    
    # File size and format
    file_size = models.PositiveIntegerField(default=0, verbose_name="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç)")
    file_format = models.CharField(max_length=10, verbose_name="–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", blank=True)
    
    # Icon
    icon = models.CharField(max_length=50, verbose_name="–ò–∫–æ–Ω–∫–∞", default='üìÑ', blank=True)
    
    # System fields
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    is_featured = models.BooleanField(default=False, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π")
    order = models.IntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    class Meta:
        verbose_name = "–î–æ–∫—É–º–µ–Ω—Ç"
        verbose_name_plural = "–î–æ–∫—É–º–µ–Ω—Ç—ã"
        ordering = ['-document_date', 'order', 'title']
    
    def __str__(self):
        return f"{self.title} ({self.document_number})"
