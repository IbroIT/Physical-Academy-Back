# Generated by Django 5.1.2 on 2025-10-29 05:35

import django.db.models.deletion
from django.db import migrations, models
from django.utils.text import slugify


def create_types_and_map(apps, schema_editor):
    SportType = apps.get_model("sports", "SportType")
    AchievementCategory = apps.get_model("sports", "AchievementCategory")
    SportSection = apps.get_model("sports", "SportSection")
    Achievement = apps.get_model("sports", "Achievement")

    # Map distinct sport_type string values from SportSection into SportType rows
    existing_types = set(
        v
        for v in SportSection._default_manager.values_list("sport_type", flat=True)
        if v
    )
    for val in existing_types:
        # Skip numeric-looking values (already IDs)
        try:
            int(val)
            continue
        except Exception:
            pass
        slug = str(val).strip()
        if not slug:
            continue
        st, created = SportType._default_manager.get_or_create(
            slug=slug, defaults={"name_ru": slug}
        )
        # update SportSection rows to reference the new PK (column currently holds string)
        SportSection._default_manager.filter(sport_type=val).update(sport_type=st.id)

    # Map distinct category string values from Achievement into AchievementCategory rows
    existing_cats = set(
        v for v in Achievement._default_manager.values_list("category", flat=True) if v
    )
    for val in existing_cats:
        try:
            int(val)
            continue
        except Exception:
            pass
        slug = str(val).strip()
        if not slug:
            continue
        cat, created = AchievementCategory._default_manager.get_or_create(
            slug=slug, defaults={"name_ru": slug}
        )
        Achievement._default_manager.filter(category=val).update(category=cat.id)


def revert_types_and_map(apps, schema_editor):
    SportType = apps.get_model("sports", "SportType")
    AchievementCategory = apps.get_model("sports", "AchievementCategory")
    SportSection = apps.get_model("sports", "SportSection")
    Achievement = apps.get_model("sports", "Achievement")

    # Revert FK numeric IDs back to slug strings for SportSection
    for st in SportType._default_manager.all():
        SportSection._default_manager.filter(sport_type=st.id).update(
            sport_type=st.slug
        )

    # Revert Achievement.category
    for cat in AchievementCategory._default_manager.all():
        Achievement._default_manager.filter(category=cat.id).update(category=cat.slug)


class Migration(migrations.Migration):

    dependencies = [
        ("sports", "0013_sporttype"),
    ]

    operations = [
        migrations.CreateModel(
            name="AchievementCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        max_length=100, unique=True, verbose_name="Идентификатор"
                    ),
                ),
                (
                    "name_ru",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Название (RU)"
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Название (EN)"
                    ),
                ),
                (
                    "name_kg",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Название (KG)"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=10,
                        verbose_name="Иконка/emoji",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        db_index=True, default=0, verbose_name="Порядок"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="Активно"
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория достижения",
                "verbose_name_plural": "Категории достижений",
                "ordering": ("order", "slug"),
            },
        ),
        migrations.RunPython(create_types_and_map, revert_types_and_map),
        migrations.RenameIndex(
            model_name="achievement",
            new_name="sports_achi_categor_cf4a47_idx",
            old_name="sports_achi_categor_285991_idx",
        ),
        migrations.RenameIndex(
            model_name="sportsection",
            new_name="sports_spor_sport_t_c3fed7_idx",
            old_name="sports_spor_sport_t_fc8cd1_idx",
        ),
        migrations.AlterField(
            model_name="sportsection",
            name="sport_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sections",
                to="sports.sporttype",
                verbose_name="Тип спорта",
            ),
        ),
        migrations.AlterField(
            model_name="achievement",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="achievements",
                to="sports.achievementcategory",
                verbose_name="Категория",
            ),
        ),
    ]
